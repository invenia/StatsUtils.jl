stages:
  - test
  - docs

.test_template: &test_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `develop`, etc.
  # only:
  #   - master
  #   - develop
  script:
    # Substitute `coverage = false` below, if you do not want coverage results.
    - /opt/julia/bin/julia -e 'Pkg.clone(pwd()); Pkg.build("StatsUtils"); Pkg.test("StatsUtils",
      coverage = true)'
    # Comment out below if you do not want coverage results.
    - /opt/julia/bin/julia -e 'Pkg.add("Coverage"); cd(Pkg.dir("StatsUtils"));
      using Coverage; cl, tl = get_summary(process_folder());
      println("(", cl/tl*100, "%) covered")'

test:0.5.0:
  image: julialang/julia:v0.5.0
  tags:
    - docker
  <<: *test_definition

test:0.5.0-dev:
  image: julialang/julia:v0.5.0-dev
  tags:
    - docker
  <<: *test_definition

test:0.6.0-dev:
  image: julialang/julia:v0.6.0-dev
  tags:
    - docker
  allow_failure: true
  <<: *test_definition

test:latest:
  image: julialang/julia:latest
  tags:
    - docker
  allow_failure: true
  <<: *test_definition

"Documentation":
  stage: docs
  tags:
    - docs
  only:
    - master
    - develop
    - docs
    - tags  # special keyword for all tags
  before_script:
    - curl -s -o setup-julia https://gitlab.invenia.ca/infrastructure/gitlab-ci-helper/raw/master/setup-julia
    - chmod +x setup-julia
    - ./setup-julia install release
  script:
    - source setup-julia export
    - julia --depwarn=no -e "Pkg.clone(pwd()); Pkg.build(\"$PKG_NAME\"); Pkg.add(\"Documenter\"); Pkg.checkout(\"Documenter\")"
    - julia --depwarn=no -e "cd(Pkg.dir(\"$PKG_NAME\", \"docs\")); include(\"make.jl\")"
    - julia --depwarn=no -e "const DOCS_DIR = joinpath(\"/mnt\", \"docs\", \"$CI_PROJECT_NAMESPACE\", \"$CI_PROJECT_NAME\", \"$CI_BUILD_REF_NAME\"); mkpath(DOCS_DIR); cp(Pkg.dir(\"$PKG_NAME\", \"docs\", \"build\"), DOCS_DIR; remove_destination=true, follow_symlinks=true)"
  after_script:
    - ./setup-julia clean
